/**
 * VeederTLS4X0Test
 * Pruebas de la clase VeederTLS4X0Test
 * © 2021, DETI Desarrollo y Transferencia de Informática
 * http://detisa.com.mx
 * @author Rolando Esquivel Villafaña, Softcoatl
 * @version 1.0
 * @since Ago 2021
 */
package com.as2.sensorft.protocol;

import com.softcoatl.tls.protocol.TLS4X0;
import com.softcoatl.tls.protocol.TLSProtocol;
import com.softcoatl.utils.ASCII;
import org.junit.*;

public class VeederTLS4X0Test {
    
    public VeederTLS4X0Test() {
        TLS4X0 instance = new TLS4X0();
        System.out.println("Comando Fecha " + instance.dateTimeCommand());
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }   

    @Test
    public void testParseDelivery() throws Exception {
        System.out.println("VeederTLS4X0Test: deliveryCommand Reading");
        String delivery = ASCII.SOH + "i20200220905001001105220819190422081919450A461E173C461AB147BD9693804201D00246EF2F8546EA1D9DBD898CD74200E0AB4285FB6C4316B0DB220812105122081211310A44F628EE44F0CF53BC873C1A42028EA046AEB5C746ABB219BD2BD86641E9128841AE2D3042ED38E5220726160422072616460A44FC8CBC44F725AABDA7F26642017D3C46B0BEB246ACCC98BD352A864204670241B1396C42EF477C220707111822070711550A44F79D1144F275C0BDD2BAEE41FF5B2146AF94DE46AC0EF3BDC5DD7141FAADD741AEDF3D42EE1A83220618183122061819050A44F723F944F1EFA6BE1EC38A4200720446AF112B46ABBE4FBDC7F43741F3EAF041AEA55642ED955702315220904201322090420380A45A1C7A5459E4B0E3DF849CA4201FD27466226C8465D47483E30495B4201F9A242284AB242ACBA7B220904200022090420190A462DE249462A2301????????4201FB6E46620DC7465D2E843E2EC7954201FDC1428F46B942ACACC1220902012422090201410A4557FC70455358363E2714D74201CB544673AF82466E72F43E21862A4201CAA341FF438842B63F3E220902010122090201230A44AA36D644A68E58????????4201CCA84673AD1C466E708D3E1A61E34201CB484187C0A142B63DC6220901231222090123330A460CAA494609A4843E16F8434201C97D4674B10B466F6F3D3E2C8E374201C6EE4276EBAF42B6CA35220901224422090123200A460CAA494609A4843E16F8434201C97D4674950F466F562B????????4201A95C4276EBAF42B6B831220901194422090122260A460CC1544609BA9E????????4201D35846749DBB466F5C273E1B18BD4201C95E4277027642B6BF60220901192622090119510A460CC1544609BA9E????????4201D3584667358A46623E5E3E187B444201C07F4277027642AF7CDB220901154222090115580A44B431AE44B053263DB70D484201BDA7467631554670E7703D7D18414201C4D3418D1B6342B796A5220831102122083110340A464663CD46422116????????4201C02E467C7CE846770FE43DAE52E94201CB09429D4D8042BAF73A220829112322082911470A4673EBCB466EB46B????????4201779B468488904681A5933D0003CC4202B42C42B65D0B42C1A86F220821100822082110270A46A6D54A46A347C63D92635C42012FC846AB3B8B46A795E13D96FD3F420132B442E53B1942E9B3D4220818185822081819410A453BD6014537CE2E3DB4315F4201B1C846B7EBAB46B419993DA6DD2041FF1B1441E8114642F68330220723203322072321050A44FADEE344F588553E11047F420121F946B0500546ACF45C3DC3E89F41F44C6441B07D1542EED8DB220615122522061513030A44FB855444F6296F3D84933A4201386546B1152546AD8CD43DA35E3141F9F23241B0C12C42EF9FB303005220809203222080921200A46A3BBB346A028D63FC319B64202D8904722602E471EBE253F29855242048E8742E25D1D43416DD7220802150022080215410A4635A2F54631C9E73FF7604A4200D6DE46FB330B46F560D43E51450F42070E2F42943D51431C9F9F220715011922071502440A4511F0EA450ECC9B3FE6848D4201E9E547339301473012B63DF2B28841F71F1141C630E643535AA2220628160922062816490A45A76B9645A3FE1F3FEF942141FD3AB546C967A746C4B1A8BDFCB1054207BB8C422D67EA4303FEEF220609085722060909200A472F5518472BE7AFBD19B0E741F770CD473619A847328B5DBDB6D45141F74EE3434ED83543561006&&CD08" + ASCII.ETX;
        TLSProtocol instance = new TLS4X0();
        instance.parseDelivery(delivery).forEach(System.out::println);
    }

    @Test
    public void testParseInventory() throws Exception {
        System.out.println("VeederTLS4X0Test: TEST inventoryCommand");
        String inventory = ASCII.SOH + "i2010023090617150110000074751E7FF0000000045EB5008452972CA0000000041FCE59A00000000022000007472D2B9B0000000046844CCA450C89CF0000000041FAC21E000000000330000074751D0890000000045EC0BB545295D36000000004207CC7D00000000&&D409" + TLSProtocol.ETX;
        TLS4X0 instance = new TLS4X0();
        instance.parseInventory(inventory).forEach(System.out::println);
    }

    @Test
    public void testValidateDateTime() throws Exception {
        System.out.println("VeederTLS4X0Test: dateTimeCommand");
        String date = ASCII.SOH + "s5010021091511112109151113&&FA5C" + ASCII.ETX;
        TLS4X0 instance = new TLS4X0();
        boolean result = instance.validateDateTime(date);
        assert result;
    }
    
}
